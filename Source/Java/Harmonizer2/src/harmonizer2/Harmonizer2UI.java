
package harmonizer2;

/* Here are the necessary libraries (Netbeans, our IDE, has some nice 
 * functionality, in that it automatically suggests importing a library if
 * you've used a function from that library) */

import java.io.*;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.filechooser.FileNameExtensionFilter;
import sun.audio.*;

/*
 * CS50 - Peter Olson
 * Fall 2012
 * With Tyler Clites and Phil Ngo
 */
public class Harmonizer2UI extends javax.swing.JFrame {

    private static int ERROR_MESSAGE;

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Harmonizer2UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Harmonizer2UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Harmonizer2UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Harmonizer2UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Harmonizer2UI().setVisible(true);
            }
        });
    }
    private String file_name;
    
    /**
     * Creates new form Harmonizer2UI
     */
    public Harmonizer2UI() {
        /* Thanks to http://stackoverflow.com/questions/8188459/disable-rename-
         * of-a-file-in-jfilechooser for the next line of code relating to 
         * UIManager - it prevents the user from rewriting file names when 
         * selecting a .wav file to upload */
        UIManager.put("FileChooser.readOnly",Boolean.TRUE);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 32767));
        upload = new javax.swing.JPanel();
        play_button = new javax.swing.JButton();
        file_uploaded_label2 = new javax.swing.JLabel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0));
        upload_button1 = new javax.swing.JButton();
        stop_button = new javax.swing.JButton();
        configure = new javax.swing.JPanel();
        time_signature = new javax.swing.JLabel();
        key = new javax.swing.JLabel();
        time_signature_box = new javax.swing.JComboBox();
        key_box = new javax.swing.JComboBox();
        new_key = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        pickup_box = new javax.swing.JComboBox();
        new_key_box = new javax.swing.JComboBox();
        number_of_parts = new javax.swing.JLabel();
        number_of_parts_box = new javax.swing.JComboBox();
        speed = new javax.swing.JLabel();
        speed_box = new javax.swing.JComboBox();
        output = new javax.swing.JPanel();
        harmonize = new javax.swing.JButton();
        file_name2 = new javax.swing.JLabel();
        file_name2_field = new javax.swing.JTextField();
        composer = new javax.swing.JLabel();
        composer_field = new javax.swing.JTextField();
        title2 = new javax.swing.JLabel();
        title2_field = new javax.swing.JTextField();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        harmonize_label = new java.awt.Label();
        title = new javax.swing.JLabel();
        determine_bpm_panel = new javax.swing.JPanel();
        bpm_cttb_button = new javax.swing.JButton();
        bpm_adjusting_beat_label = new javax.swing.JLabel();
        bpm_suggestion_label = new javax.swing.JLabel();
        bpm_suggested_bpm_label = new javax.swing.JLabel();
        beats_per_minute_field = new javax.swing.JTextField();

        jFileChooser1.setFileFilter(null);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        upload.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Upload", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Helvetica", 0, 18))); // NOI18N
        upload.setSize(new java.awt.Dimension(321, 225));

        play_button.setFont(new java.awt.Font("Helvetica", 0, 13)); // NOI18N
        play_button.setText("►");
        play_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                play_buttonActionPerformed(evt);
            }
        });

        file_uploaded_label2.setFont(new java.awt.Font("Helvetica", 0, 13)); // NOI18N
        file_uploaded_label2.setText("  (none)");

        upload_button1.setText("Select File");
        upload_button1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upload_button1ActionPerformed(evt);
            }
        });

        stop_button.setFont(new java.awt.Font("Helvetica", 0, 24)); // NOI18N
        stop_button.setText("■");
        stop_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stop_buttonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout uploadLayout = new org.jdesktop.layout.GroupLayout(upload);
        upload.setLayout(uploadLayout);
        uploadLayout.setHorizontalGroup(
            uploadLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, uploadLayout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(filler1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(75, 75, 75))
            .add(uploadLayout.createSequentialGroup()
                .addContainerGap()
                .add(uploadLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(uploadLayout.createSequentialGroup()
                        .add(play_button, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 45, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(8, 8, 8)
                        .add(stop_button, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 45, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(uploadLayout.createSequentialGroup()
                        .add(6, 6, 6)
                        .add(file_uploaded_label2))
                    .add(upload_button1))
                .addContainerGap(54, Short.MAX_VALUE))
        );
        uploadLayout.setVerticalGroup(
            uploadLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(uploadLayout.createSequentialGroup()
                .addContainerGap()
                .add(upload_button1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(file_uploaded_label2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(uploadLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(stop_button, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 39, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(play_button, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 39, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(filler1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(113, 113, 113))
        );

        configure.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Configure", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Helvetica", 0, 18))); // NOI18N

        time_signature.setFont(new java.awt.Font("Helvetica", 0, 14)); // NOI18N
        time_signature.setText("Time Signature:");

        key.setFont(new java.awt.Font("Helvetica", 0, 14)); // NOI18N
        key.setText("Original Key");

        time_signature_box.setFont(new java.awt.Font("Helvetica", 0, 12)); // NOI18N
        time_signature_box.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "4/4", "3/4" }));

        key_box.setFont(new java.awt.Font("Helvetica", 0, 12)); // NOI18N
        key_box.setMaximumRowCount(15);
        key_box.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "C#", "F#", "B", "E", "A", "D", "G", "C", "F", "Bb", "Eb", "Ab", "Db", "Gb", "Cb" }));
        key_box.setSelectedIndex(7);

        new_key.setFont(new java.awt.Font("Helvetica", 0, 14)); // NOI18N
        new_key.setText("Transpose To:");

        jLabel1.setFont(new java.awt.Font("Helvetica", 0, 14)); // NOI18N
        jLabel1.setText("Pickup Beats:");

        pickup_box.setFont(new java.awt.Font("Helvetica", 0, 12)); // NOI18N
        pickup_box.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "1", "2", "3" }));

        new_key_box.setFont(new java.awt.Font("Helvetica", 0, 12)); // NOI18N
        new_key_box.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "C#", "F#", "B", "E", "A", "D", "G", "C", "F", "Bb", "Eb", "Ab", "Db", "Gb", "Cb" }));
        new_key_box.setSelectedIndex(7);

        number_of_parts.setFont(new java.awt.Font("Helvetica", 0, 14)); // NOI18N
        number_of_parts.setText("Number of Parts:");

        number_of_parts_box.setFont(new java.awt.Font("Helvetica", 0, 13)); // NOI18N
        number_of_parts_box.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4" }));
        number_of_parts_box.setSelectedIndex(3);

        speed.setFont(new java.awt.Font("Helvetica", 0, 14)); // NOI18N
        speed.setText("Speed:");

        speed_box.setFont(new java.awt.Font("Helvetica", 0, 13)); // NOI18N
        speed_box.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Whole", "Dotted Half", "Half", "Exact" }));

        org.jdesktop.layout.GroupLayout configureLayout = new org.jdesktop.layout.GroupLayout(configure);
        configure.setLayout(configureLayout);
        configureLayout.setHorizontalGroup(
            configureLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(configureLayout.createSequentialGroup()
                .addContainerGap()
                .add(configureLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(new_key)
                    .add(jLabel1)
                    .add(time_signature)
                    .add(key)
                    .add(number_of_parts)
                    .add(speed))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(configureLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(new_key_box, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 73, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(pickup_box, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 73, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(key_box, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 73, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(time_signature_box, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(speed_box, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 90, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(number_of_parts_box, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(44, 44, 44))
        );
        configureLayout.setVerticalGroup(
            configureLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(configureLayout.createSequentialGroup()
                .add(configureLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(time_signature_box, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(configureLayout.createSequentialGroup()
                        .add(1, 1, 1)
                        .add(time_signature, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(13, 13, 13)
                .add(configureLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(key)
                    .add(key_box, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(configureLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(new_key)
                    .add(new_key_box, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(configureLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(pickup_box, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(configureLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(number_of_parts)
                    .add(number_of_parts_box, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(configureLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(speed)
                    .add(speed_box, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        output.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Output", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Helvetica", 0, 18))); // NOI18N

        harmonize.setFont(new java.awt.Font("Lucida Grande", 0, 28)); // NOI18N
        harmonize.setText("Harmonize");
        harmonize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                harmonizeActionPerformed(evt);
            }
        });

        file_name2.setFont(new java.awt.Font("Helvetica", 0, 14)); // NOI18N
        file_name2.setText("File Name:");

        file_name2_field.setFont(new java.awt.Font("Helvetica", 0, 13)); // NOI18N

        composer.setFont(new java.awt.Font("Helvetica", 0, 14)); // NOI18N
        composer.setText("Composer:");

        composer_field.setFont(new java.awt.Font("Helvetica", 0, 13)); // NOI18N

        title2.setFont(new java.awt.Font("Helvetica", 0, 14)); // NOI18N
        title2.setText("Title:");

        title2_field.setFont(new java.awt.Font("Helvetica", 0, 13)); // NOI18N
        title2_field.setActionCommand("<Not Set>");

        harmonize_label.setFont(new java.awt.Font("Helvetica", 0, 13)); // NOI18N

        org.jdesktop.layout.GroupLayout outputLayout = new org.jdesktop.layout.GroupLayout(output);
        output.setLayout(outputLayout);
        outputLayout.setHorizontalGroup(
            outputLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(outputLayout.createSequentialGroup()
                .addContainerGap()
                .add(outputLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(outputLayout.createSequentialGroup()
                        .add(289, 289, 289)
                        .add(filler2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(0, 0, Short.MAX_VALUE))
                    .add(outputLayout.createSequentialGroup()
                        .add(outputLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(harmonize, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 206, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(outputLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                .add(harmonize_label, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 191, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(outputLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                    .add(outputLayout.createSequentialGroup()
                                        .add(title2)
                                        .add(45, 45, 45)
                                        .add(title2_field, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE))
                                    .add(outputLayout.createSequentialGroup()
                                        .add(file_name2)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(file_name2_field))
                                    .add(outputLayout.createSequentialGroup()
                                        .add(composer)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(composer_field)))))
                        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        outputLayout.setVerticalGroup(
            outputLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(outputLayout.createSequentialGroup()
                .add(outputLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(file_name2)
                    .add(file_name2_field, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(outputLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(composer_field, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(composer))
                .add(18, 18, 18)
                .add(outputLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(title2)
                    .add(title2_field, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(harmonize, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 46, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(harmonize_label, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(14, 14, 14)
                .add(filler2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(17, 17, 17))
        );

        title.setFont(new java.awt.Font("Helvetica", 0, 60)); // NOI18N
        title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title.setText("Harmonizer");

        determine_bpm_panel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Determine BPM", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Helvetica", 0, 16))); // NOI18N

        bpm_cttb_button.setText("Click to the Beat");
        bpm_cttb_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bpm_cttb_buttonActionPerformed(evt);
            }
        });

        bpm_adjusting_beat_label.setFont(new java.awt.Font("Helvetica", 0, 13)); // NOI18N
        bpm_adjusting_beat_label.setText("Suggested BPM:");

        bpm_suggestion_label.setFont(new java.awt.Font("Helvetica", 0, 13)); // NOI18N

        bpm_suggested_bpm_label.setFont(new java.awt.Font("Helvetica", 0, 14)); // NOI18N
        bpm_suggested_bpm_label.setText("Beats Per Minute:");

        beats_per_minute_field.setFont(new java.awt.Font("Helvetica", 0, 13)); // NOI18N
        beats_per_minute_field.setText("120");

        org.jdesktop.layout.GroupLayout determine_bpm_panelLayout = new org.jdesktop.layout.GroupLayout(determine_bpm_panel);
        determine_bpm_panel.setLayout(determine_bpm_panelLayout);
        determine_bpm_panelLayout.setHorizontalGroup(
            determine_bpm_panelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(determine_bpm_panelLayout.createSequentialGroup()
                .addContainerGap()
                .add(determine_bpm_panelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(determine_bpm_panelLayout.createSequentialGroup()
                        .add(bpm_adjusting_beat_label)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(bpm_suggestion_label))
                    .add(determine_bpm_panelLayout.createSequentialGroup()
                        .add(bpm_suggested_bpm_label)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(beats_per_minute_field, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(bpm_cttb_button))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        determine_bpm_panelLayout.setVerticalGroup(
            determine_bpm_panelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(determine_bpm_panelLayout.createSequentialGroup()
                .addContainerGap()
                .add(determine_bpm_panelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(bpm_adjusting_beat_label, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 19, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(bpm_suggestion_label, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(bpm_cttb_button)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(determine_bpm_panelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(beats_per_minute_field, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(bpm_suggested_bpm_label, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 26, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(title, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 711, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(determine_bpm_panel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(upload, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(configure, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 235, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(output, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 279, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(title, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 101, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, configure, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .add(upload, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 144, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(determine_bpm_panel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(output, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /* Generate global variables - these need to exist even after the methods using 
     * them are called */
    AudioStream as = null;   
    boolean selection = true;
    int[] time = new int[10];
    public boolean change = true;
    
    // When the "play" button is pressed, do the following:
    private void play_buttonActionPerformed(java.awt.event.ActionEvent evt) {
        
        /* Thanks to http://www.javaworld.com/javaworld/javatips/jw-javatip24.html
        * for the following code to create a basic audio player */
          
        InputStream in = null;
        try {
            // Try to create an inputstream
            in = new FileInputStream(file_name);
            /* Catch the relevant exceptions and output errors messages, should 
             * it fail */
        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(this, "No File Selected!", "Error",
                    Harmonizer2UI.ERROR_MESSAGE);
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(this, "No File Selected!", "Error",
                    Harmonizer2UI.ERROR_MESSAGE);
            return;
        }
       
            // Create an audiostream so we can play the file
        try {
            as = new AudioStream(in);
            /* Catch the relevant exception and output an error message, 
             * should it fail */
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "No File Selected!", "Error",
                    Harmonizer2UI.ERROR_MESSAGE);
        } catch (NullPointerException ex) {
        }

        // Start playing the .wav file    
        AudioPlayer.player.start(as);            
    }

    // Do the following when the upload button is pressed:
    private void upload_button1ActionPerformed(java.awt.event.ActionEvent evt) {
        
        /* Reset the file filters (so that every time the upload button is 
         * pressed, another file filter is not added to those from before) */
        jFileChooser1.resetChoosableFileFilters();
        
        /* Thanks to http://java.about.com/od/javax_swing/a/Jfilechooser-
         * Overview.htm for the next line of code, which restricts users to 
         * picking .wav files */
        jFileChooser1.setFileFilter(new FileNameExtensionFilter("WAV Files",
                "wav"));
        
        /* Thanks to http://www.experts-exchange.com/Programming/Languages/Java/
         * A_351-Custom-File-Filtering-Using-Java-File-Choosers.html for help 
         * getting rid of the "all files" view option */
        jFileChooser1.setAcceptAllFileFilterUsed(false);
        
        /* Thanks to http://netbeans-org.1045718.n5.nabble.com/How-can-I-add-a-
         * File-Chooser-to-a-button-in-Matisse-td2905800.html for the 
         * showOpenDialog code */
        if(jFileChooser1.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            
            /* Thanks to http://java.about.com/od/javax_swing/a/Jfilechooser-
             * Overview.htm for the next line of code, which creates a File from
             * the file selected in the filechooser */
            File file = jFileChooser1.getSelectedFile();
            
            /* Thanks to https://forums.oracle.com/forums/thread.jspa?threadID=
             * 1255148&tstart=25920 for the following if statement and error 
             * message, which rejects any non-wav files */
            if (file != null && !file.getName().toLowerCase().endsWith(".wav"))
            {
                JOptionPane.showMessageDialog(this,"Invalid file selected!",
                        "Error",Harmonizer2UI.ERROR_MESSAGE);
            }
            else
            {
                /* If the files are appropriate, determine and save the path, 
                 * and display the file name */
                file_name = file.getPath();
                file_uploaded_label2.setText(file.getName());
            }
        } 
    }

    // Do the following when the stop button is pressed:
    private void stop_buttonActionPerformed(java.awt.event.ActionEvent evt) {
        /* Thanks to http://www.javaworld.com/javaworld/javatips/jw-javatip24
         * .html for the following line of code */

        AudioPlayer.player.stop(as);
    }

    // Do the following when the harmonize button is pressed:
    private void harmonizeActionPerformed(java.awt.event.ActionEvent evt) {

        /* Thanks to http://www.homeandlearn.co.uk/java/java_combo_boxes.html 
         * for help with combo boxes */
        /* Thanks to http://ubuntuforums.org/showthread.php?t=983405 for help 
         * with getText */
        
        String temp_output = (String) file_name2_field.getText();
        String temp_output2 = temp_output + ".xml";

        /* Thanks to http://stackoverflow.com/questions/9461306/how-to-change-
         * spaces-to-underscore-and-make-string-case-insensitive for help with 
         * replaceAll, used here to make the text input into an output argument 
         * without spaces */
        String str_output2 = temp_output2.replaceAll(" ", "_");
        
        /* The order in which the keys is listed, and the input required by
         * Phil's code, are in reverse order, so we flip the sign when getting
         * index.  We subtract 7 because C should be 0. */
        int int_key = -(key_box.getSelectedIndex() - 7);
        int int_new_key = -(new_key_box.getSelectedIndex() - 7);

        /* Thanks to http://docs.oracle.com/javase/tutorial/java/data/
         * manipstrings.html for help with charAt */

        /* Takes in different user input fields and prepares to output them */
        String str_beats_per_minute_field = 
                (String)beats_per_minute_field.getText();
        String temp_time_sig = (String)time_signature_box.getSelectedItem();
        char str_time_sig = temp_time_sig.charAt(0);
        int int_pickup = pickup_box.getSelectedIndex();
        int int_speed = speed_box.getSelectedIndex();
        String str_num_parts = (String)number_of_parts_box.getSelectedItem();
        String temp_composer = (String)composer_field.getText();
        String str_composer = temp_composer.replaceAll(" ", "_");
        String temp_title2 = (String)title2_field.getText();
        String str_title2 = temp_title2.replaceAll(" ", "_");

        /* Thanks to http://www.velocityreviews.com/forums/t129905-convert-
         * numeric-string-into-integer-java.html for help with parseInt */

        int int_beats_per_minute_field = 0;

        /* Display an error message if harmonize is clicked with no file
         * selected */
        if (file_name == null)
        {
            JOptionPane.showMessageDialog(this, "No File Selected!", "Error",
                    Harmonizer2UI.ERROR_MESSAGE);
            return;
        }
        
        /* Convert the string input into an integer - if that fails, display
         * an error message */
        try
        {
            int_beats_per_minute_field = Integer.parseInt(
                    str_beats_per_minute_field);
        } catch (NumberFormatException e)
        {
            JOptionPane.showMessageDialog(this, "BPM Not An Integer!", "Error",
                    Harmonizer2UI.ERROR_MESSAGE);
            return;
        }

        // Display error message if the BPM input is not in the right range
        if (int_beats_per_minute_field < 20 || int_beats_per_minute_field > 200)
        {
            JOptionPane.showMessageDialog(this,
                    "BPM Must Be Between 20 and 200!", "Error",
                    Harmonizer2UI.ERROR_MESSAGE);
            return;
        }
        
        // If any of the textbox user inputs is empty, display an error message
        if (str_composer.equals("") || str_title2.equals("") || 
                temp_output.equals(""))
        {
            JOptionPane.showMessageDialog(this,
                    "Output Specifications Incomplete!", "Error",
                    Harmonizer2UI.ERROR_MESSAGE);
            return;
        }

        // Create the output string (this will be sent to the command line)
        String output1 = ("./import " + file_name + " " + str_output2 + " " + int_key + " "
                + int_new_key + " " + str_beats_per_minute_field + " " + str_time_sig + " "
                + int_pickup + " " + int_speed + " " + str_num_parts + " " + str_composer + " "
                + str_title2);

        /* Thanks to http://www.coderanch.com/t/419192/java/java/Runtime-
         * getRuntime-exec-String-command for Runtime.getRuntime().exec code */
        try
        {
            /* Execute the output1 command (to run the C code).  Wait to see
             * if there are errors, or whether the harmony/ies is/are generated
             * properly */
            Process p = Runtime.getRuntime().exec(output1);
            try
            {
                if (p.waitFor() == 0)
                {
                    harmonize_label.setText("Harmony Generated!");
                }
                else
                {
                    JOptionPane.showMessageDialog(this,
                            "Harmony Generation Failed", "Error",
                            Harmonizer2UI.ERROR_MESSAGE);
                    harmonize_label.setText("");
                }
            }
            catch (InterruptedException e)
            {
            }
        } catch (IOException e)
        {
        }

    }

    /* Allow the user to calculate the bpm by clicking this button to the beat - It
    * averages the last 10 clicks, and bases the BPM off of those */
    private void bpm_cttb_buttonActionPerformed(java.awt.event.ActionEvent evt) {

        // Each time the button is clicked, record the time in this array
        for (int i = 0; i < time.length - 1; i++)
        {
            time[i] = time[i + 1];
        }
        time[time.length - 1] = (int) System.currentTimeMillis();
        
        // Create an array for measuring the lengths of time between clicks
        int[] time_dif = new int[time.length - 1];
        int smaller_3000 = 0;
        int estimated_bpm = 0;
        
        /* Count the number of time differences less than 3000 milliseconds 
         * (200 bpm), and average those */
        for (int i = 0; i < time.length - 2; i++)
        {
            time_dif[i] = time[i + 1] - time[i];
            if (time_dif[i] > 0 && time_dif[i] < 3000)
            {
                smaller_3000++;
                estimated_bpm += time_dif[i];
            }
        }
        if (smaller_3000 > 0)
        {
            estimated_bpm /= smaller_3000;
            estimated_bpm = 60000 / estimated_bpm;
        }
        
        // Display the calculated BPM
        bpm_suggestion_label.setText(estimated_bpm == 0?"":
                Integer.toString(estimated_bpm));

    }
    
    // Variables declaration - do not modify
    private javax.swing.JTextField beats_per_minute_field;
    private javax.swing.JLabel bpm_adjusting_beat_label;
    private javax.swing.JButton bpm_cttb_button;
    private javax.swing.JLabel bpm_suggested_bpm_label;
    private javax.swing.JLabel bpm_suggestion_label;
    private javax.swing.JLabel composer;
    private javax.swing.JTextField composer_field;
    private javax.swing.JPanel configure;
    private javax.swing.JPanel determine_bpm_panel;
    private javax.swing.JLabel file_name2;
    private javax.swing.JTextField file_name2_field;
    private javax.swing.JLabel file_uploaded_label2;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.Box.Filler filler3;
    private javax.swing.JButton harmonize;
    private java.awt.Label harmonize_label;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel key;
    private javax.swing.JComboBox key_box;
    private javax.swing.JLabel new_key;
    private javax.swing.JComboBox new_key_box;
    private javax.swing.JLabel number_of_parts;
    private javax.swing.JComboBox number_of_parts_box;
    private javax.swing.JPanel output;
    private javax.swing.JComboBox pickup_box;
    private javax.swing.JButton play_button;
    private javax.swing.JLabel speed;
    private javax.swing.JComboBox speed_box;
    private javax.swing.JButton stop_button;
    private javax.swing.JLabel time_signature;
    private javax.swing.JComboBox time_signature_box;
    private javax.swing.JLabel title;
    private javax.swing.JLabel title2;
    private javax.swing.JTextField title2_field;
    private javax.swing.JPanel upload;
    private javax.swing.JButton upload_button1;
    // End of variables declaration
}
